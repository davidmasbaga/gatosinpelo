---
const { frontmatter } = Astro.props;
import { dateFormatter } from "../scripts/formaters";
import '../styles/markdownPostStyles.module.css'
const Container ='div'
import { Image } from "astro:assets";
const StyledContainer ='div'
import BaseLayout from "./BaseLayout.astro";
---


   
     <div class="max-w-full w-full mb-32 mr-36 ">
        <article class="mx-auto w-full max-w-5xl format format-sm sm:format-base lg:format-lg format-blue dark:format-invert dark:text-white ">
            <header class="mb-4 lg:mb-6 not-format">
               <Image src={frontmatter.image.url} alt="imagendeblog" width={1024} height={600}/>
               <section class="flex content-center items-center gap-10">
                  <p class="text-base m-0 text-gray-500 dark:text-gray-400"><time datetime={dateFormatter(frontmatter.pubDate)} title="February 8th, 2022">Feb. 8, 2022</time></p>
                  <div class="flex flex-wrap my-4 gap-2 justify-center">
                    <p class="whitespace-nowrap rounded-full bg-purple-100 px-2.5 py-0.5 text-sm text-purple-700"><a href={`/categories/${frontmatter.category}`}>{frontmatter.category}</a></p>
                    
                  </div>
                </section>
                
            </header>
			<StyledContainer class='page_markdown'>
            <slot/>
          </StyledContainer>
        </article>


    </div>


  </main>
 </div>
  
<style>
    a {
      color: #00539F;
    }
  
    .category {
      display: flex;
      flex-wrap: wrap;
    }
  
    .category {
      margin: 0.25em;
      border: dotted 1px #a1a1a1;
      border-radius: .5em;
      padding: .5em 1em;
      font-size: 1.15em;
      background-color: #F8FCFD;
    }

   
  </style>


<script>
	const fnObserver = () => {
		function handleIntersection(
			entries: IntersectionObserverEntry[],
			observer: IntersectionObserver
		) {
			entries.forEach((entry) => {
				const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

				if (entry.isIntersecting) {
					index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
					index?.classList.add(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				} else {
					index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
					index?.classList.remove(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				}
			})
		}

		const headings = document.querySelectorAll(
			'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
		)

		const options = {
			root: null,
			rootMargin: ' 15% 0px 0% 0px ',
			threshold: 1
		}

		const observer = new IntersectionObserver(handleIntersection, options)

		headings.forEach((heading) => {
			observer.observe(heading)
		})
	}
	fnObserver()
	document.addEventListener('astro:after-swap', fnObserver)
</script>
